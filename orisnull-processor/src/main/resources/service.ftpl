package com.evilcorp.orisnull.repository;

import com.evilcorp.orisnull.annotation.OrIsNullQuery;
<#list methods as method>
import ${method.entity.fullname};
import ${method.filter.fullname};
</#list>
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManagerFactory;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class ${klass.shortname}Impl implements ${klass.shortname} {

    @Autowired
    EntityManagerFactory emf;


    <#list methods as method>


    @Override
    public List<${method.entity.shortname}> ${method.name}(${method.filter.shortname} filter) {
        if (filter.isEmpty()) {
            return Collections.emptyList();
        }
        Map<String, Object> params = new HashMap<>();
        <#list method.filter.fields as field>
        params.put("${field.name}", filter.${field.getter}());
        </#list>
        String sql = "${method.query}";
        sql = clean(sql, params);
        final var em = emf.createEntityManager();
        final var query = em.createQuery(sql, ${method.entity.shortname}.class);

        params.forEach(query::setParameter);
        return query.getResultList();
    }

    </#list>

    private String clean(String query, Map<String, Object> params) {
        final Set<String> paramNames = params.keySet();
        String transformedQuery = query;
        for (String paramName : paramNames) {
            Pattern pattern = Pattern.compile(":" + paramName + "\\s+is\\s+null", Pattern.CASE_INSENSITIVE);
            final Matcher matcher = pattern.matcher(transformedQuery);
            if (params.get(paramName) != null) {
                transformedQuery = matcher.replaceAll("(1!=1)");
            } else {
                transformedQuery = matcher.replaceAll("(1=1)");
            }
        }
        return transformedQuery;
    }
}
